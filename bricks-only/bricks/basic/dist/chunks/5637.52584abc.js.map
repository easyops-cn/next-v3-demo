{"version":3,"file":"chunks/5637.52584abc.js","mappings":"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","sources":["webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/add.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/boolean.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/cmdbInstanceShowName.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/countBy.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/constants/interface.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/constants/percent.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/datetime.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/deltaTime.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/divide.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/equal.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/find.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/findIndex.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/findLast.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/findLastIndex.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/get.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/graphTree.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/groupBy.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/groupByToIndex.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/includes.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/join.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/json.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/jsonStringify.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/keyBy.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/map.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/mapToArray.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/mergeArrayByKey.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/multiply.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/not.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/nullish.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/number.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/parseTimeRange.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/randomString.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/reverse.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/slice.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/sort.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/split.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/string.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/substr.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/substring.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/subtract.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/ternary.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/uniq.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/constants/bytes.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/constants/byteRates.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/constants/times.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/constants/numbers.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/constants/unitMap.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/func/util.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/func/time.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/func/data.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/func/dataRate.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/func/number.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/func/valueFormatter.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/utils/unitFormat/func/percent.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/unitFormat.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/yaml.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/yamlStringify.js","webpack:///../../node_modules/@easyops-cn/brick-next-pipes/dist/esm/pipes/round.js"],"sourcesContent":["/**\n * 数学加法或字符串拼接。\n *\n * @category Mathematics\n *\n * @remarks\n *\n * 详见 {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition}。\n *\n * @example\n *\n * 数学加法：\n *\n * ```ts\n * // Number + Number -> addition\n * 1 + 2 // 3\n *\n * // Boolean + Number -> addition\n * true + 1 // 2\n *\n * // Boolean + Boolean -> addition\n * false + false // 0\n * ```\n *\n * 字符串拼接：\n *\n * ```ts\n * // String + String -> concatenation\n * 'foo' + 'bar' // \"foobar\"\n *\n * // Number + String -> concatenation\n * 5 + 'foo' // \"5foo\"\n *\n * // String + Boolean -> concatenation\n * 'foo' + false // \"foofalse\"\n * ```\n *\n * @public\n *\n * @param value - 值。\n * @param operand - 操作数。\n *\n * @returns 如果其中一个参数为字符串，返回字符串，否则返回数字。\n */\nexport function add(value, operand) {\n    return value + operand;\n}\n//# sourceMappingURL=add.js.map","/**\n * 将一个值转换为布尔值（也可使用别名 `bool`）。\n *\n * @category Type conversion\n *\n * @public\n *\n * @remarks 该转换会把字符串的 `\"0\"` 也看作 `false`。\n *\n * @param value - 需要转换的值。\n *\n * @returns 转换后的布尔值。\n */\nexport function boolean(value) {\n    // Consider `\"0\"` as false.\n    return value !== \"0\" && Boolean(value);\n}\n/** @internal */\nexport const bool = boolean;\n//# sourceMappingURL=boolean.js.map","/**\n * 获得一个 CMDB 实例的展示名。\n *\n * @category Others\n *\n * @public\n *\n * @example\n *\n * ```ts\n * cmdbInstancesShowName(\"Foo\")\n * // Returns \"Foo\".\n *\n * cmdbInstancesShowName([\"Foo\", \"Bar\"])\n * // Returns \"Foo(Bar)\".\n *\n * cmdbInstancesShowName([\"Foo\", \"Bar\", \"Baz\"])\n * // Returns \"Foo(Bar, Baz)\".\n *\n * cmdbInstancesShowName([\"Foo\"])\n * // Returns \"Foo\".\n * ```\n *\n * @param value - 用于展示的（一个或多个）属性值。\n *\n * @returns 实例的展示名。\n */\nexport function cmdbInstanceShowName(value) {\n    if (Array.isArray(value)) {\n        const firstKey = value[0] || \"-\"; // 第一个show key为undefined时展示-\n        const resKey = value.slice(1, value.length).join(\",\");\n        const res = resKey ? `${firstKey}(${resKey})` : firstKey;\n        return res;\n    }\n    else {\n        return value;\n    }\n}\n//# sourceMappingURL=cmdbInstanceShowName.js.map","import { countBy as _countBy } from \"lodash\";\n/**\n * 统计一个集合中每个元素的指定属性（或迭代器执行结果）的值出现的次数。\n *\n * @category Collection\n *\n * @remarks 透传调用 {@link https://lodash.com/docs/#countBy | _.countBy}。\n *\n * @example\n *\n * ```ts\n * countBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': 1, '6': 2 }\n *\n * countBy(['one', 'two', 'three'], 'length');\n * // => { '3': 2, '5': 1 }\n * ```\n *\n * @public\n *\n * @param collection - 数据集合。\n * @param iteratee - 属性名（或迭代器）。\n *\n * @returns 统计结果。\n */\nexport function countBy(collection, iteratee) {\n    return _countBy(collection, iteratee);\n}\n//# sourceMappingURL=countBy.js.map","export var UnitType;\n(function (UnitType) {\n    UnitType[\"Time\"] = \"time\";\n    UnitType[\"Byte\"] = \"byte\";\n    UnitType[\"Bibyte\"] = \"bibyte\";\n    UnitType[\"BitRate\"] = \"bitRate\";\n    UnitType[\"ByteRate\"] = \"byteRate\";\n})(UnitType || (UnitType = {}));\n//# sourceMappingURL=interface.js.map","export var PercentUnitId;\n(function (PercentUnitId) {\n    PercentUnitId[\"Percent1\"] = \"percent(1)\";\n    PercentUnitId[\"Percent100\"] = \"percent(100)\";\n})(PercentUnitId || (PercentUnitId = {}));\nexport const percentFormatUnitIds = [\n    PercentUnitId.Percent1,\n    PercentUnitId.Percent100,\n];\n//# sourceMappingURL=percent.js.map","import moment from \"moment\";\n/**\n * 日期时间格式化（使用当地时区）。\n *\n * @category Datetime\n *\n * @public\n *\n * @example\n *\n * ```ts\n * datetime(1582877669000, \"YYYY-MM-DD\")\n * // Returns \"2020-02-28\"\n *\n * datetime(\"2020-02-28T17:14\", \"YYYY-MM-DD\")\n * // Returns \"2020-02-28\"\n * ```\n *\n * @param value - 日期时间字符串或 Unix 时间戳（{@link https://momentjs.com/docs/#/parsing/string/}）。\n * @param format - 输出格式。\n *\n * @returns 格式化后的日期时间。\n */\nexport function datetime(value, format) {\n    return moment(value).format(format);\n}\n//# sourceMappingURL=datetime.js.map","import moment from \"moment\";\nfunction isPeriod(time) {\n    return typeof time === \"object\" && time !== null;\n}\nfunction getMoment(input, format) {\n    return typeof input === \"number\" ? moment(input) : moment(input, format);\n}\n/**\n * 将一个时间段转换为人类可读的文本。\n *\n * @category Datetime\n *\n * @remarks\n *\n * 给定一个时间段（`startTime` 和 `endTime`），将它转换为人类可读的文本。\n *\n * 当输入时间为单个值时，则计算它与当前时间的间隔时间段。\n *\n * @public\n *\n * @example\n *\n * ```ts\n * // Assuming now is \"2019-05-10 17:51:00\".\n *\n * deltaTime(\"2019-05-10 17:21:00\")\n * // Returns \"30 minutes ago\"\n *\n * deltaTime(\"2019-05-10 18:51:00\")\n * // Returns \"in an hour\"\n *\n * deltaTime({ startTime: \"2019-05-10\", endTime: \"2019-06-10\" }, false)\n * // Returns \"a month\"\n *\n * deltaTime({ startTime: \"2019-05-10 17:48:00\" }, false)\n * // Returns \"3 minutes\"\n * ```\n *\n * @param time - 指定时间（字符串或 UNIX 时间戳）或时间段。\n * @param withSuffix - 是否添加后缀（默认为 `true`）。\n * @param format - 输入的时间格式（使用时间戳时可忽略，默认为 `\"YYYY-MM-DD HH:mm:ss\"`）。\n *\n * @returns 人类可读的时间段显示。\n */\nexport function deltaTime(time, withSuffix = true, format = \"YYYY-MM-DD HH:mm:ss\") {\n    if (!time)\n        return \"\";\n    if (isPeriod(time) && time.startTime && time.endTime) {\n        const startTime = getMoment(time.startTime, format);\n        const endTime = getMoment(time.endTime, format);\n        return moment.duration(endTime.diff(startTime)).humanize(withSuffix);\n    }\n    const other = isPeriod(time) ? time.startTime || time.endTime : time;\n    const then = getMoment(other, format);\n    return moment.duration(then.diff(moment())).humanize(withSuffix);\n}\n//# sourceMappingURL=deltaTime.js.map","/**\n * 数学除法。\n *\n * @category Mathematics\n *\n * @public\n *\n * @param value - 被除数。\n * @param operand - 除数。\n *\n * @returns 商。\n */\nexport function divide(value, operand) {\n    return value / operand;\n}\n//# sourceMappingURL=divide.js.map","import { isEqual } from \"lodash\";\n/**\n * 比较两个值是否相同（深度比较）。\n *\n * @category Logic\n *\n * @remarks\n *\n * 透传调用 {@link https://lodash.com/docs/#isEqual | _.isEqual}。\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are **not** supported.\n *\n * @public\n *\n * @param value - 被比较的值。\n * @param other - 比较值。\n *\n * @returns 如果两者相同返回 `true`，否则返回 `false`。\n *\n * @example\n *\n * ```ts\n * let object = { 'user': 'fred' };\n * let other = { 'user': 'fred' };\n *\n * equal(object, other);\n * // => true\n *\n * object === other;\n * // => false\n * ```\n */\nexport function equal(value, other) {\n    return isEqual(value, other);\n}\n//# sourceMappingURL=equal.js.map","import { find as _find } from \"lodash\";\n/**\n * 从一个数据集合中找到第一个匹配的元素。\n *\n * @category Collection\n *\n * @remarks 透传调用 {@link https://lodash.com/docs/#find | _.find}。\n *\n * @public\n *\n * @param collection - 要搜索的集合。\n * @param predicate - 需要匹配的条件。\n * @param fromIndex - 从哪个位置开始搜索。\n *\n * @returns 返回找到的元素，没有找到时返回 `undefined`。\n */\nexport function find(collection, predict, fromIndex) {\n    return _find(collection, predict, fromIndex);\n}\n//# sourceMappingURL=find.js.map","import { findIndex as _findIndex } from \"lodash\";\n/**\n * 从一个数组中找到第一个匹配的元素的位置。\n *\n * @category Array\n *\n * @remarks 透传调用 {@link https://lodash.com/docs/#findIndex | _.findIndex}。\n *\n * @public\n *\n * @param array - 要搜索的数组。\n * @param predicate - 需要匹配的条件。\n * @param fromIndex - 从哪个位置开始搜索。\n *\n * @returns 返回找到的元素的位置，没有找到时返回 `-1`。\n */\nexport function findIndex(array, predict, fromIndex) {\n    return _findIndex(array, predict, fromIndex);\n}\n//# sourceMappingURL=findIndex.js.map","import { findLast as _findLast } from \"lodash\";\n/**\n * 从一个数据集合中从后向前找到第一个匹配的元素。\n *\n * @category Collection\n *\n * @remarks 透传调用 {@link https://lodash.com/docs/#findLast | _.findLast}。\n *\n * @public\n *\n * @param collection - 要搜索的集合。\n * @param predicate - 需要匹配的条件。\n * @param fromIndex - 从哪个位置开始搜索。\n *\n * @returns 返回找到的元素，没有找到时返回 `undefined`。\n */\nexport function findLast(collection, predict, fromIndex) {\n    return _findLast(collection, predict, fromIndex);\n}\n//# sourceMappingURL=findLast.js.map","import { findLastIndex as _findLastIndex } from \"lodash\";\n/**\n * 从一个数组中从后向前找到第一个匹配的元素的位置。\n *\n * @category Array\n *\n * @remarks 透传调用 {@link https://lodash.com/docs/#findLastIndex | _.findLastIndex}。\n *\n * @public\n *\n * @param array - 要搜索的数组。\n * @param predicate - 需要匹配的条件。\n * @param fromIndex - 从哪个位置开始搜索。\n *\n * @returns 返回找到的元素的位置，没有找到时返回 `-1`。s\n */\nexport function findLastIndex(array, predict, fromIndex) {\n    return _findLastIndex(array, predict, fromIndex);\n}\n//# sourceMappingURL=findLastIndex.js.map","import { get as _get } from \"lodash\";\n/**\n * 获取一个对象指定属性（路径）的值。\n *\n * @remarks 透传调用 {@link https://lodash.com/docs/#get | _.get}。\n *\n * @category Object\n *\n * @public\n *\n * @param object - 对象。\n * @param path - 属性（路径）。\n * @param defaultValue - 当获取的值为 `undefined` 时返回的默认值。\n *\n * @returns 结果。\n */\nexport function get(object, path, defaultValue) {\n    return _get(object, path, defaultValue);\n}\n//# sourceMappingURL=get.js.map","import { find, get, groupBy, uniq, map, forEach, isEmpty, orderBy, } from \"lodash\";\n/**\n * 将{@link http://192.168.100.162/next/developers/providers/cmdb/instance-graph-api-traverse-graph | 图遍历查询接口}返回的图数据转换为树结构数据。\n *\n * @category Others\n *\n * @public\n *\n * @example\n *\n * ```ts\n * const data: GraphData = {\n *   topic_vertices: [\n *     {\n *       instanceId: \"1\",\n *       name: \"A\",\n *     },\n *     {\n *       instanceId: \"2\",\n *       name: \"B\",\n *     }\n *   ],\n *   vertices: [\n *     {\n *       instanceId: \"3\",\n *       name: \"C\",\n *     },\n *     {\n *       instanceId: \"4\",\n *       name: \"D\",\n *     }\n *   ],\n *   edges: [\n *     {\n *       out: \"1\",\n *       in: \"3\",\n *       out_name: \"children\",\n *     },\n *     {\n *       out: \"2\",\n *       in: \"4\",\n *       out_name: \"children\",\n *     }\n *   ]\n * }\n * graphTree(data)\n * // Returns:\n * // [\n * //   {instanceId: \"1\", name: \"A\", children: [{instanceId: \"3\", name: \"C\"}]},\n * //   {instanceId: \"2\", name: \"B\", children: [{instanceId: \"4\", name: \"D\"}]}\n * // ]\n * ```\n *\n * @param value - 图数据。\n * @param query - 图查询条件及排序等。\n *\n * @returns 树结构数据。\n */\nexport function graphTree(value, query) {\n    if (!value) {\n        return [];\n    }\n    const sort = query?.sort;\n    const groupByEdgeOut = groupBy(value.edges, \"out\");\n    const findChildren = (node) => {\n        const relationEdges = groupByEdgeOut[node.instanceId];\n        forEach(relationEdges, (edge) => {\n            const key = edge.out_name;\n            const foundInstance = find(value.vertices, [\"instanceId\", edge.in]);\n            if (foundInstance) {\n                const resultInstance = findChildren(foundInstance);\n                if (node[key]) {\n                    node[key].push(resultInstance);\n                }\n                else {\n                    node[key] = [resultInstance];\n                }\n            }\n        });\n        if (sort) {\n            const keyList = uniq(map(relationEdges, \"out_name\"));\n            forEach(keyList, (key) => {\n                if (!isEmpty(node[key])) {\n                    node[key] = orderBy(node[key], (item) => get(item, sort.key) ?? -Infinity, sort.order === -1 ? \"desc\" : \"asc\");\n                }\n            });\n        }\n        return node;\n    };\n    const result = value.topic_vertices?.map((root) => {\n        return findChildren(root);\n    }) ?? [];\n    return result;\n}\n//# sourceMappingURL=graphTree.js.map","import { groupBy as _groupBy } from \"lodash\";\n/**\n * 把一个集合按指定属性（或迭代器执行结果）的值进行分组。\n *\n * @category Collection\n *\n * @remarks 透传调用 {@link https://lodash.com/docs/#groupBy | _.groupBy}。\n *\n * @public\n *\n * @example\n *\n * ```ts\n * groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n * ```\n *\n * @param collection - 数据结合。\n * @param iteratee - 属性名（或迭代器）。\n *\n * @returns 分组结果。\n */\nexport function groupBy(collection, iteratee) {\n    return _groupBy(collection, iteratee);\n}\n//# sourceMappingURL=groupBy.js.map","import { isNil, groupBy, keys, set, indexOf, get } from \"lodash\";\n/**\n * 返回一个数组的拷贝，并为每个元素新增一个分组索引字段。\n *\n * @category Others\n *\n * @public\n *\n * @remarks\n *\n * 新增的分组索引按分组属性升序排列。\n *\n * @example\n *\n * ```ts\n * const data = [\n *   { a: \"3\", b: \"1\" },\n *   { a: \"1\", b: \"2\" },\n *   { a: \"1\", b: \"3\" },\n * ]\n * groupByIndex(data, \"a\", \"groupIndex\")\n * // Returns `[\n * //   { a: \"3\", b: \"1\", groupIndex: 1 },\n * //   { a: \"1\", b: \"2\", groupIndex: 0 },\n * //   { a: \"1\", b: \"3\", groupIndex: 0 },\n * // ]`\n * ```\n *\n * @param value - 对象数组。\n * @param groupField - 要分组的属性名。\n * @param targetField - 要新增的分组索引属性名。\n *\n * @returns 增加了分组索引属性的新数组。\n */\nexport function groupByToIndex(value, groupField, targetField) {\n    let result = value;\n    if (!isNil(groupField) && !isNil(targetField)) {\n        const groupByValue = groupBy(value, groupField);\n        const allKeys = keys(groupByValue).sort();\n        result = result.map((v) => {\n            const item = { ...v };\n            set(item, targetField, indexOf(allKeys, get(v, groupField)));\n            return item;\n        });\n    }\n    return result;\n}\n//# sourceMappingURL=groupByToIndex.js.map","/**\n * 判断一个数组是否包含指定元素，或一个字符串是否包含指定子串。\n *\n * @category Array\n *\n * @public\n *\n * @param value - 一个数组或字符串。\n * @param part - 要搜索的数组元素或字符串子串。\n *\n * @returns 如果包含返回 `true`，否则返回 `false`。\n */\nexport function includes(value, part) {\n    return value.includes(part);\n}\n//# sourceMappingURL=includes.js.map","/**\n * 将一个数组的所有元素拼接成字符串。\n *\n * @category Array\n *\n * @remarks 当输入值不是数组时返回空字符串。\n *\n * @public\n *\n * @param value - 数组。\n * @param separator - 分隔符号（默认为 `\",\"`）。\n *\n * @returns 拼接后的字符串。\n */\nexport function join(value, separator = \",\") {\n    return Array.isArray(value) ? value.join(separator) : \"\";\n}\n//# sourceMappingURL=join.js.map","import { isNil } from \"lodash\";\n/**\n * 解析一个 JSON 格式的字符串（反序列化）。\n *\n * @category Serialization\n *\n * @public\n *\n * @param value - JSON 格式的字符串。\n *\n * @returns 返回解析后的值；如果解析失败返回 `undefined`；如果输入为 `null` 或 `undefined` 返回原输入。\n */\nexport function json(value) {\n    if (isNil(value))\n        return value;\n    try {\n        return JSON.parse(value);\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.error(e);\n        return;\n    }\n}\n//# sourceMappingURL=json.js.map","/**\n * 将一个值转换为 JSON 格式的字符串（序列化）。\n *\n * @category Serialization\n *\n * @public\n *\n * @param value - 输入值。\n * @param indent - 空格缩进数量（默认为 `2`）。\n *\n * @returns 序列化后的字符串；如果序列化失败（例如包含循环引用）返回 `undefined`。\n */\nexport function jsonStringify(value, indent = 2) {\n    try {\n        return JSON.stringify(value, null, indent);\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.error(e);\n        return;\n    }\n}\n//# sourceMappingURL=jsonStringify.js.map","import { keyBy as _keyBy } from \"lodash\";\n/**\n * 将指定属性（或迭代器执行结果）作为键名收集一个集合中的元素。\n *\n * @category Collection\n *\n * @remarks 透传调用 {@link https://lodash.com/docs/#keyBy | _.keyBy}。\n *\n * @public\n *\n * @example\n *\n * ```ts\n * const array = [\n *   { 'dir': 'left', 'code': 97 },\n *   { 'dir': 'right', 'code': 100 }\n * ];\n *\n * keyBy(array, function(o) {\n *   return String.fromCharCode(o.code);\n * });\n * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n *\n * keyBy(array, 'dir');\n * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }\n * ```\n *\n * @param collection - 数据集合。\n * @param iteratee - 属性名（或迭代器）。\n *\n * @returns 收集结果。\n */\nexport function keyBy(collection, iteratee) {\n    return _keyBy(collection, iteratee);\n}\n//# sourceMappingURL=keyBy.js.map","import { get } from \"lodash\";\n/**\n * 通过填充调用数组中各项的指定属性来创建一个新数组。\n *\n * @category Array\n *\n * @public\n *\n * @example\n *\n * ```ts\n * map([{ count: 123 }], \"count\")\n * // Returns `[ 123 ]`\n *\n * map([{ item: { name: \"xyz\" } }, {}], \"item.name\")\n * // Returns [\"xyz\", undefined]\n * ```\n *\n * @param value - 数组。\n * @param key - 属性名（路径）。\n *\n * @returns 返回新数组，当输入不是数组时返回空数组。\n */\nexport function map(value, key) {\n    return Array.isArray(value) ? value.map((item) => get(item, key)) : [];\n}\n//# sourceMappingURL=map.js.map","/**\n * 将一个对象根据键值对映射转换为数组。\n *\n * @category Others\n *\n * @remarks\n *\n * 该函数首先将输入的对象 `data` 拆分成键值对数组，再将每个键值对\n * `[key, value]` 转换为 `{ [keyField]: key, [valueField]: value }`，\n * 最后返回这个新数组。\n *\n * @public\n *\n * @example\n *\n * ```ts\n * const data = { name: \"Li Lei\", age: 16, gender: \"male\" }\n * mapToArray(data, \"label\", \"value\")\n * // Returns `[\n * //   {label: \"name\", \"value\": \"Li Lei\"},\n * //   {label: \"age\", \"value\": 16},\n * //   {label: \"gender\", \"value\": \"male\"},\n * // ]`\n * ```\n *\n * @param data - 对象。\n * @param keyField - 键名字段。\n * @param valueField - 键值字段。\n *\n * @returns 键值对映射后的数组。\n */\nexport function mapToArray(data, keyField, valueField) {\n    if (typeof data !== \"object\" || !data)\n        return [];\n    return Object.entries(data).map(([k, v]) => ({\n        [keyField]: k,\n        [valueField]: v,\n    }));\n}\n//# sourceMappingURL=mapToArray.js.map","import { keyBy, mergeWith, isArray } from \"lodash\";\n/**\n * 将多个对象数组根据键合并为一个数组, 对于数组类型的属性不会 deep merge, 只会 concat。\n *\n * @category Array\n *\n * @public\n *\n * @example\n *\n * ```ts\n * const dataList = [\n *     [{id:1,a:\"sai\"},{id:2,a: \"King\"}],\n *     [{id:1,b:23},{id:3,b:24}],\n * ]\n * mergeArrayByKey(dataList, \"id\")\n * // Returns  `[\n * //     {id:1,a:\"sai\",b:23},\n * //     {id:2,a:\"King\"},\n * //     {id:3,b:24},\n * //  ]`\n *\n * const dataList2 = [\n *     [{\"id\":1, 'data': [{ 'user': 'barney' }, { 'user': 'fred' }] }],\n *     [{\"id\":1, 'data': [{ 'age': 36 }, { 'age': 40 }]}]\n * ]\n * mergeArrayByKey(dataList, \"id\")\n * // Returns  `[\n * //      {id: 1, data: [{ 'user': 'barney' }, { 'user': 'fred' }, { 'age': 36 }, { 'age': 40 }] },\n * // ]`\n * ```\n *\n * @param dataList - 所有需要合并的对象数组\n * @param key - 属性名（或迭代器）。\n * @returns 根据 key 合并后的数组。\n */\nexport function mergeArrayByKey(dataList, key) {\n    return dataList.reduce((acc, cur) => {\n        return Object.values(mergeWith(keyBy(acc, key), keyBy(cur, key), customizer));\n    }, []);\n}\n// A specialized version of merge which simply concatenates arrays instead of deep merging them.\nfunction customizer(objValue, srcValue) {\n    if (isArray(objValue)) {\n        return objValue.concat(srcValue);\n    }\n}\n//# sourceMappingURL=mergeArrayByKey.js.map","/**\n * 数学乘法。\n *\n * @category Mathematics\n *\n * @public\n *\n * @param value - 被乘数。\n * @param operand - 乘数。\n *\n * @returns 积。\n */\nexport function multiply(value, operand) {\n    return value * operand;\n}\n//# sourceMappingURL=multiply.js.map","/**\n * 布尔取反。\n *\n * @category Logic\n *\n * @public\n *\n * @param value - 输入值\n *\n * @returns 取反后的布尔值。\n */\nexport function not(value) {\n    return !value;\n}\n//# sourceMappingURL=not.js.map","/**\n * 空值合并（`??`）。\n *\n * @category Logic\n *\n * @public\n *\n * @param value - 输入值。\n * @param defaultValue - 默认值。\n *\n * @returns 当输入值是 `null` 或 `undefined` 时返回默认值，否则返回原输入值。\n */\nexport function nullish(value, defaultValue) {\n    return value ?? defaultValue;\n}\n//# sourceMappingURL=nullish.js.map","/**\n * 将输入值转换为数字。\n *\n * @category Type conversion\n *\n * @public\n *\n * @param value - 输入值。\n *\n * @returns 转换后的数字。\n */\nexport function number(value) {\n    return Number(value);\n}\n//# sourceMappingURL=number.js.map","import moment from \"moment\";\n/**\n * 解析一个时间字符串。\n *\n * @category Datetime\n *\n * @public\n *\n * @remarks\n *\n * `now/d` 将被转换为当天开始时的时间戳。\n *\n * `now/y` 将被转换为当年开始时的时间戳。\n *\n * `now-{n}d` 将被转换为 `n` 天前的时间戳。\n *\n * @param value - 时间字符串。\n *\n * @returns 解析后的时间戳，如果输入为空返回当前的时间戳。\n */\nexport function parseTimeRange(value) {\n    if (value === \"now/d\") {\n        return +moment().startOf(\"day\");\n    }\n    if (value === \"now/y\") {\n        return +moment().startOf(\"year\");\n    }\n    const reg = /^now-(\\d+)(\\w+)/;\n    const matches = reg.exec(value);\n    if (matches !== null) {\n        const [, num, unit] = matches;\n        return +moment().subtract(num, unit);\n    }\n    return value ? +value : +moment();\n}\n//# sourceMappingURL=parseTimeRange.js.map","/**\n * 获得一个随机字符串\n *\n * @category Others\n *\n * @public\n *\n * @example\n *\n * ```ts\n * randomString()\n * // Returns \"jUf92Zd0\".\n *\n * randomString(6)\n * // Returns \"sUf0Zd\".\n *\n * randomString(6, \"0123456789@\")\n * // Returns \"971@12\".\n *\n * ```\n *\n * @param length - 随机字符串的长度，默认为8。\n *\n * @param characters - 随机字符串包含哪些字符，默认为大小写字母及数字。例如指定\"0123456789\"则随机字符只会包含数字；指定\"0123456789abcdef\"则随机字符是个16进制数。\n *\n * @returns 随机字符串\n */\nexport function randomString(length, characters) {\n    length = length > 0 ? length : 8;\n    characters =\n        typeof characters === \"string\"\n            ? characters\n            : \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    let result = \"\";\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return result;\n}\n//# sourceMappingURL=randomString.js.map","/**\n * 返回一个数组倒转之后的新数组。\n *\n * @category Array\n *\n * @public\n *\n * @param value - 数组。\n *\n * @returns 倒转后的新数组，如果输入不是数组则返回空数组。\n */\nexport function reverse(value) {\n    return Array.isArray(value) ? value.slice().reverse() : [];\n}\n//# sourceMappingURL=reverse.js.map","/**\n * 根据起始位置和结束位置（不包含）返回一个数组的一部分。\n *\n * @category Array\n *\n * @public\n *\n * @remarks\n *\n * 详见 {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice}。\n *\n * @param value - 输入数组。\n * @param start - 要开始提取的索引位置。\n * @param end - 结束提取的索引位置。\n *\n * @returns 新数组。\n */\nexport function slice(value, start, end) {\n    return value.slice(start, end);\n}\n//# sourceMappingURL=slice.js.map","import { sortBy } from \"lodash\";\n/**\n * 返回一个数组按指定属性排序后的新数组。\n *\n * @category Array\n *\n * @public\n *\n * @param value - 数组。\n * @param fields - 属性（路径）。\n *\n * @returns 排序后的新数组。\n */\nexport function sort(value, fields) {\n    return Array.isArray(value) ? sortBy(value, fields) : [];\n}\n//# sourceMappingURL=sort.js.map","/**\n * 将一个字符串分割为字符串列表。\n *\n * @category String\n *\n * @public\n *\n * @remarks\n *\n * 详见 {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split}。\n *\n * @param value - 字符串。\n * @param separator - 分隔符。\n *\n * @returns 返回字符串子串数组，如果输入不是字符串则返回空数组。\n */\nexport function split(value, separator) {\n    return typeof value === \"string\" ? value.split(separator) : [];\n}\n//# sourceMappingURL=split.js.map","/**\n * 将输入值转换为字符串。\n *\n * @category Type conversion\n *\n * @public\n *\n * @param value - 输入值。\n *\n * @returns 返回转换后的字符串，如果输入值为 `null` 或 `undefined` 则返回空字符串。\n */\nexport function string(value) {\n    // Consider `undefined` and `null` as `\"\"`.\n    return value === undefined || value === null ? \"\" : String(value);\n}\n//# sourceMappingURL=string.js.map","/**\n * 根据指定起始位置和长度返回一个字符串的子串。\n *\n * @category String\n *\n * @public\n *\n * @remarks\n *\n * 详见 {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr}。\n *\n * @param value - 字符串。\n * @param from - 返回的子串的起始位置。\n * @param length - 返回的子串的长度。\n *\n * @returns 子串。\n */\nexport function substr(value, from, length) {\n    return typeof value === \"string\" ? value.substr(from, length) : \"\";\n}\n//# sourceMappingURL=substr.js.map","/**\n * 根据指定起始位置和结束位置（不包含）返回一个字符串的子串。\n *\n * @category String\n *\n * @public\n *\n * @remarks\n *\n * 详见 {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring}\n *\n * @param value - 字符串。\n * @param from - 返回的子串的起始位置。\n * @param end - 返回的子串的结束位置。\n *\n * @returns 子串。\n */\nexport function substring(value, start, end) {\n    return typeof value === \"string\" ? value.substring(start, end) : \"\";\n}\n//# sourceMappingURL=substring.js.map","/**\n * 数学减法。\n *\n * @category Mathematics\n *\n * @public\n *\n * @param value - 被减数。\n * @param operand - 减数。\n *\n * @returns 差。\n */\nexport function subtract(value, operand) {\n    return value - operand;\n}\n//# sourceMappingURL=subtract.js.map","/**\n * 三元运算，根据条件返回两个值中的一个。\n *\n * @category Logic\n *\n * @public\n *\n * @param value - 条件。\n * @param resultIfTrue - 当条件为真时返回的值。\n * @param resultIfFalse - 当条件为假时返回的值。\n *\n * @returns 当 `value` 为真时返回 `resultIfTrue`，否则返回 `resultIfFalse`。\n */\nexport function ternary(value, resultIfTrue, resultIfFalse) {\n    return value ? resultIfTrue : resultIfFalse;\n}\n//# sourceMappingURL=ternary.js.map","import { uniq as _uniq } from \"lodash\";\n/**\n * 获取一个数组去重后的新数组。\n *\n * @category Array\n *\n * @remarks 透传调用 {@link https://lodash.com/docs/#uniq | _.uniq}。\n *\n * @public\n *\n * @param array - 数组。\n *\n * @returns 去重后的数组。\n *\n * @example\n *\n * ```ts\n * uniq([2, 1, 2]);\n * // => [2, 1]\n * ```\n */\nexport function uniq(array) {\n    return _uniq(array);\n}\n//# sourceMappingURL=uniq.js.map","export var BytesUnitId;\n(function (BytesUnitId) {\n    BytesUnitId[\"Bytes\"] = \"bytes\";\n    BytesUnitId[\"Kilobytes\"] = \"kilobytes\";\n    BytesUnitId[\"Megabytes\"] = \"megabytes\";\n    BytesUnitId[\"Gigabytes\"] = \"gigabytes\";\n    BytesUnitId[\"Terabytes\"] = \"terabytes\";\n    BytesUnitId[\"Petabytes\"] = \"petabytes\";\n    BytesUnitId[\"Bibytes\"] = \"bibytes\";\n    BytesUnitId[\"Kibibytes\"] = \"kibibytes\";\n    BytesUnitId[\"Mebibytes\"] = \"mebibytes\";\n    BytesUnitId[\"Gibibytes\"] = \"gibibytes\";\n    BytesUnitId[\"Tebibytes\"] = \"tebibytes\";\n    BytesUnitId[\"Pebibytes\"] = \"pebibytes\";\n    // deprecated\n    BytesUnitId[\"b\"] = \"b\";\n    BytesUnitId[\"B\"] = \"B\";\n    BytesUnitId[\"KB\"] = \"KB\";\n    BytesUnitId[\"MB\"] = \"MB\";\n    BytesUnitId[\"GB\"] = \"GB\";\n})(BytesUnitId || (BytesUnitId = {}));\nexport const bytes = [\n    {\n        id: BytesUnitId.Bytes,\n        alias: [\"B\", \"bytes(B)\"],\n        divisor: 1,\n        display: \"B\",\n    },\n    {\n        id: BytesUnitId.Kilobytes,\n        alias: [\"KB\", \"kilobytes(KB)\"],\n        divisor: 1000,\n        display: \"KB\",\n    },\n    {\n        id: BytesUnitId.Megabytes,\n        alias: [\"MB\", \"megabytes(MB)\"],\n        divisor: 1000 ** 2,\n        display: \"MB\",\n    },\n    {\n        id: BytesUnitId.Gigabytes,\n        alias: [\"GB\", \"gigabytes(GB)\"],\n        divisor: 1000 ** 3,\n        display: \"GB\",\n    },\n    {\n        id: BytesUnitId.Terabytes,\n        alias: [\"TB\", \"terabytes(TB)\"],\n        divisor: 1000 ** 4,\n        display: \"TB\",\n    },\n    {\n        id: BytesUnitId.Petabytes,\n        alias: [\"PB\", \"petabytes(PB)\"],\n        divisor: 1000 ** 5,\n        display: \"PB\",\n    },\n];\nexport const bibytes = [\n    {\n        id: BytesUnitId.Bibytes,\n        alias: [\"B\", \"bibytes(B)\"],\n        divisor: 1,\n        display: \"B\",\n    },\n    {\n        id: BytesUnitId.Kibibytes,\n        alias: [\"KiB\", \"kibibytes(KiB)\"],\n        divisor: 1024,\n        display: \"KiB\",\n    },\n    {\n        id: BytesUnitId.Mebibytes,\n        alias: [\"MiB\", \"mebibytes(MiB)\"],\n        divisor: 1024 ** 2,\n        display: \"MiB\",\n    },\n    {\n        id: BytesUnitId.Gibibytes,\n        alias: [\"GiB\", \"gibibytes(GiB)\"],\n        divisor: 1024 ** 3,\n        display: \"GiB\",\n    },\n    {\n        id: BytesUnitId.Tebibytes,\n        alias: [\"TiB\", \"tebibytes(TiB)\"],\n        divisor: 1024 ** 4,\n        display: \"TiB\",\n    },\n    {\n        id: BytesUnitId.Pebibytes,\n        alias: [\"PiB\", \"pebibytes(PiB)\"],\n        divisor: 1024 ** 5,\n        display: \"PiB\",\n    },\n];\nexport const deprecatedBytes = [\n    {\n        id: BytesUnitId.b,\n        divisor: 1,\n        display: \"b\",\n    },\n    {\n        id: BytesUnitId.B,\n        divisor: 8,\n        display: \"B\",\n    },\n    {\n        id: BytesUnitId.KB,\n        divisor: 8 * 1024,\n        display: \"KB\",\n    },\n    {\n        id: BytesUnitId.MB,\n        divisor: 8 * 1024 * 1024,\n        display: \"MB\",\n    },\n    {\n        id: BytesUnitId.GB,\n        divisor: 8 * 1024 * 1024 * 1024,\n        display: \"GB\",\n    },\n];\n//# sourceMappingURL=bytes.js.map","export var ByteRatesUnitId;\n(function (ByteRatesUnitId) {\n    ByteRatesUnitId[\"BitsPerSecond\"] = \"bits/sec\";\n    ByteRatesUnitId[\"KilobitsPerSecond\"] = \"kilobits/sec\";\n    ByteRatesUnitId[\"MegabitsPerSecond\"] = \"megabits/sec\";\n    ByteRatesUnitId[\"GigabitsPerSecond\"] = \"gigabits/sec\";\n    ByteRatesUnitId[\"BytesPerSecond\"] = \"bytes/sec\";\n    ByteRatesUnitId[\"KilobytesPerSecond\"] = \"kilobytes/sec\";\n    ByteRatesUnitId[\"MegabytesPerSecond\"] = \"megabytes/sec\";\n    ByteRatesUnitId[\"GigabytesPerSecond\"] = \"gigabytes/sec\";\n    // deprecated\n    ByteRatesUnitId[\"bps\"] = \"bps\";\n    ByteRatesUnitId[\"Bps\"] = \"Bps\";\n    ByteRatesUnitId[\"KBps\"] = \"KBps\";\n    ByteRatesUnitId[\"MBps\"] = \"MBps\";\n    ByteRatesUnitId[\"GBps\"] = \"GBps\";\n})(ByteRatesUnitId || (ByteRatesUnitId = {}));\nexport const bitRates = [\n    {\n        id: ByteRatesUnitId.BitsPerSecond,\n        alias: [\"bps\", \"bits/sec(bps)\"],\n        divisor: 1,\n        display: \"bps\",\n    },\n    {\n        id: ByteRatesUnitId.KilobitsPerSecond,\n        alias: [\"Kbps\", \"kilobits/sec(Kbps)\"],\n        divisor: 1024,\n        display: \"Kbps\",\n    },\n    {\n        id: ByteRatesUnitId.MegabitsPerSecond,\n        alias: [\"Mbps\", \"megabits/sec(Mbps)\"],\n        divisor: 1024 * 1024,\n        display: \"Mbps\",\n    },\n    {\n        id: ByteRatesUnitId.GigabitsPerSecond,\n        alias: [\"Gbps\", \"gigabits/sec(Gbps)\"],\n        divisor: 1024 * 1024 * 1024,\n        display: \"Gbps\",\n    },\n];\nexport const byteRates = [\n    {\n        id: ByteRatesUnitId.BytesPerSecond,\n        alias: [\"Bps\", \"bytes/sec(Bps)\"],\n        divisor: 8,\n        display: \"Bps\",\n    },\n    {\n        id: ByteRatesUnitId.KilobytesPerSecond,\n        alias: [\"KBps\", \"kilobytes/sec(KBps)\"],\n        divisor: 8 * 1024,\n        display: \"KBps\",\n    },\n    {\n        id: ByteRatesUnitId.MegabytesPerSecond,\n        alias: [\"MBps\", \"megabytes/sec(MBps)\"],\n        divisor: 8 * 1024 * 1024,\n        display: \"MBps\",\n    },\n    {\n        id: ByteRatesUnitId.GigabytesPerSecond,\n        alias: [\"GBps\", \"gigabytes/sec(GBps)\"],\n        divisor: 8 * 1024 * 1024 * 1024,\n        display: \"GBps\",\n    },\n];\nexport const deprecatedByteRates = [\n    {\n        id: ByteRatesUnitId.bps,\n        divisor: 1,\n        display: \"bps\",\n    },\n    {\n        id: ByteRatesUnitId.Bps,\n        divisor: 8,\n        display: \"Bps\",\n    },\n    {\n        id: ByteRatesUnitId.KBps,\n        divisor: 8 * 1024,\n        display: \"KBps\",\n    },\n    {\n        id: ByteRatesUnitId.MBps,\n        divisor: 8 * 1024 * 1024,\n        display: \"MBps\",\n    },\n    {\n        id: ByteRatesUnitId.GBps,\n        divisor: 8 * 1024 * 1024 * 1024,\n        display: \"GBps\",\n    },\n];\n//# sourceMappingURL=byteRates.js.map","export var TimesUnitId;\n(function (TimesUnitId) {\n    TimesUnitId[\"Nanosecond\"] = \"nanoseconds\";\n    TimesUnitId[\"Microsecond\"] = \"microseconds\";\n    TimesUnitId[\"Milliseconds\"] = \"milliseconds\";\n    TimesUnitId[\"Seconds\"] = \"seconds\";\n    TimesUnitId[\"Minutes\"] = \"minutes\";\n    TimesUnitId[\"Hours\"] = \"hours\";\n    TimesUnitId[\"Days\"] = \"days\";\n    TimesUnitId[\"Weeks\"] = \"weeks\";\n    TimesUnitId[\"Months\"] = \"months\";\n    TimesUnitId[\"Years\"] = \"years\";\n    // deprecated\n    TimesUnitId[\"ms\"] = \"ms\";\n    TimesUnitId[\"s\"] = \"s\";\n    TimesUnitId[\"min\"] = \"min\";\n    TimesUnitId[\"hour\"] = \"hour\";\n    TimesUnitId[\"day\"] = \"day\";\n    TimesUnitId[\"week\"] = \"week\";\n})(TimesUnitId || (TimesUnitId = {}));\nexport const times = [\n    {\n        id: TimesUnitId.Nanosecond,\n        alias: [\"ns\", \"nanoseconds(ns)\"],\n        divisor: 1,\n        display: \"ns\",\n    },\n    {\n        id: TimesUnitId.Microsecond,\n        alias: [\"μs\", \"microseconds(μs)\"],\n        divisor: 1000,\n        display: \"μs\",\n    },\n    {\n        id: TimesUnitId.Milliseconds,\n        alias: [\"ms\", \"milliseconds(ms)\"],\n        divisor: 1000 * 1000,\n        display: \"ms\",\n    },\n    {\n        id: TimesUnitId.Seconds,\n        alias: [\"s\", \"seconds(s)\"],\n        divisor: 1000 * 1000 * 1000,\n        display: \"s\",\n    },\n    {\n        id: TimesUnitId.Minutes,\n        alias: [\"min\", \"minutes(min)\"],\n        divisor: 1000 * 1000 * 1000 * 60,\n        display: \"min\",\n    },\n    {\n        id: TimesUnitId.Hours,\n        alias: [\"hour\", \"hours(hour)\"],\n        divisor: 1000 * 1000 * 1000 * 60 * 60,\n        display: \"hour\",\n    },\n    {\n        id: TimesUnitId.Days,\n        alias: [\"day\", \"days(day)\"],\n        divisor: 1000 * 1000 * 1000 * 60 * 60 * 24,\n        display: \"day\",\n    },\n    {\n        id: TimesUnitId.Weeks,\n        alias: [\"week\", \"weeks(week)\"],\n        divisor: 1000 * 1000 * 1000 * 60 * 60 * 24 * 7,\n        display: \"week\",\n    },\n    {\n        id: TimesUnitId.Months,\n        alias: [\"month\", \"months(month)\"],\n        divisor: 1000 * 1000 * 1000 * 60 * 60 * 24 * 30,\n        display: \"month\",\n    },\n    {\n        id: TimesUnitId.Years,\n        alias: [\"year\", \"years(year)\"],\n        divisor: 1000 * 1000 * 1000 * 60 * 60 * 24 * 365,\n        display: \"year\",\n    },\n];\nexport const deprecatedTimes = [\n    {\n        id: TimesUnitId.ms,\n        divisor: 1,\n        display: \"毫秒\",\n    },\n    {\n        id: TimesUnitId.s,\n        divisor: 1000,\n        display: \"秒\",\n    },\n    {\n        id: TimesUnitId.min,\n        divisor: 1000 * 60,\n        display: \"分\",\n    },\n    {\n        id: TimesUnitId.hour,\n        divisor: 1000 * 60 * 60,\n        display: \"小时\",\n    },\n    {\n        id: TimesUnitId.day,\n        divisor: 1000 * 60 * 60 * 24,\n        display: \"天\",\n    },\n    {\n        id: TimesUnitId.week,\n        divisor: 1000 * 60 * 60 * 24 * 7,\n        display: \"周\",\n    },\n];\n//# sourceMappingURL=times.js.map","export var ShortUnitId;\n(function (ShortUnitId) {\n    ShortUnitId[\"None\"] = \"none\";\n    ShortUnitId[\"K\"] = \"K\";\n    ShortUnitId[\"M\"] = \"M\";\n    ShortUnitId[\"B\"] = \"B\";\n    ShortUnitId[\"T\"] = \"T\";\n})(ShortUnitId || (ShortUnitId = {}));\nexport const numberFormatUnits = [\n    {\n        id: ShortUnitId.None,\n        divisor: 1,\n        display: \"\",\n    },\n    {\n        id: ShortUnitId.K,\n        divisor: 1000,\n        display: \"K\",\n    },\n    {\n        id: ShortUnitId.M,\n        divisor: 1000 * 1000,\n        display: \"M\",\n    },\n    {\n        id: ShortUnitId.B,\n        divisor: 1000 * 1000 * 1000,\n        display: \"B\",\n    },\n    {\n        id: ShortUnitId.T,\n        divisor: 1000 * 1000 * 1000 * 1000,\n        display: \"T\",\n    },\n];\n//# sourceMappingURL=numbers.js.map","import { bytes, bibytes } from \"./bytes\";\nimport { bitRates, byteRates } from \"./byteRates\";\nimport { times } from \"./times\";\nimport { UnitType } from \"./interface\";\nexport const UNIT_MAP = {\n    [UnitType.Time]: times,\n    [UnitType.Byte]: bytes,\n    [UnitType.Bibyte]: bibytes,\n    [UnitType.BitRate]: bitRates,\n    [UnitType.ByteRate]: byteRates,\n};\n//# sourceMappingURL=unitMap.js.map","export const matchUnit = (unitData, unit) => {\n    return (unitData.id.toLocaleLowerCase() === unit?.toLocaleLowerCase() ||\n        (unitData.alias &&\n            unitData.alias.map((alias) => alias.toLocaleLowerCase()).includes(unit)));\n};\n// 由于 bytes 的单位中会有 b 和 B ，所以对别名进行判断时不能转换为小写\nexport const matchDataUnit = (unitData, unit) => {\n    return (unitData.id.toLocaleLowerCase() === unit?.toLocaleLowerCase() ||\n        (unitData.alias && unitData.alias.includes(unit)));\n};\n//# sourceMappingURL=util.js.map","import { times, } from \"../constants\";\nimport { matchUnit } from \"./util\";\nexport const timeFormatUnits = [times];\nexport const timeFormatUnitIds = [].concat.apply([], timeFormatUnits.map((timeFormatUnitGroup) => [\n    ...timeFormatUnitGroup.map((timeFormatUnit) => timeFormatUnit.id),\n    ...[].concat.apply([], timeFormatUnitGroup.map((timeFormatUnit) => timeFormatUnit.alias ? timeFormatUnit.alias : [])),\n]));\nexport function humanizeTimeValue(value, unit, targetUnit) {\n    let baseTimeUnitGroupIndex = 0;\n    let baseTimeUnitIndex = 2;\n    let targetTimeUnitIndex = -1;\n    if (unit) {\n        for (let i = 0; i < timeFormatUnits.length; ++i) {\n            let _baseTimeUnitIndex = -1;\n            let _targetTimeUnitIndex = -1;\n            timeFormatUnits[i].forEach((timeUnit, index) => {\n                if (matchUnit(timeUnit, unit))\n                    _baseTimeUnitIndex = index;\n                if (matchUnit(timeUnit, targetUnit))\n                    _targetTimeUnitIndex = index;\n            });\n            if (_baseTimeUnitIndex !== -1) {\n                baseTimeUnitGroupIndex = i;\n                baseTimeUnitIndex = _baseTimeUnitIndex;\n                targetTimeUnitIndex = _targetTimeUnitIndex;\n                break;\n            }\n        }\n    }\n    else if (targetUnit) {\n        targetTimeUnitIndex = timeFormatUnits[baseTimeUnitGroupIndex].findIndex((timeUnit) => matchUnit(timeUnit, targetUnit));\n    }\n    const timeFormatUnitGroup = timeFormatUnits[baseTimeUnitGroupIndex];\n    const baseTimeFormatUnit = timeFormatUnitGroup[baseTimeUnitIndex];\n    let targetTimeFormatUnit = baseTimeFormatUnit;\n    if (targetTimeUnitIndex === -1) {\n        for (let i = baseTimeUnitIndex + 1; i < timeFormatUnitGroup.length; ++i) {\n            if (value / (timeFormatUnitGroup[i].divisor / baseTimeFormatUnit.divisor) >=\n                1) {\n                targetTimeFormatUnit = timeFormatUnitGroup[i];\n            }\n            else {\n                break;\n            }\n        }\n    }\n    else {\n        targetTimeFormatUnit = timeFormatUnitGroup[targetTimeUnitIndex];\n    }\n    if (targetUnit && targetTimeUnitIndex === -1) {\n        console.warn(`Cannot convert unit \"${unit || baseTimeFormatUnit.display}\" to \"${targetUnit}\"`);\n    }\n    return [\n        value / (targetTimeFormatUnit.divisor / baseTimeFormatUnit.divisor),\n        targetTimeFormatUnit.display,\n    ];\n}\n//# sourceMappingURL=time.js.map","import { bytes, bibytes, deprecatedBytes, } from \"../constants\";\nimport { matchDataUnit } from \"./util\";\nexport const dataFormatUnits = [\n    bytes,\n    bibytes,\n    // deprecated\n    deprecatedBytes,\n];\nexport const dataFormatUnitIds = [].concat.apply([], dataFormatUnits.map((dataFormatUnitGroup) => [\n    ...dataFormatUnitGroup.map((dataFormatUnit) => dataFormatUnit.id),\n    ...[].concat.apply([], dataFormatUnitGroup.map((dataFormatUnit) => dataFormatUnit.alias ? dataFormatUnit.alias : [])),\n]));\nexport function humanizeDataValue(value, unit, targetUnit) {\n    let baseDataUnitGroupIndex = dataFormatUnits.length - 1;\n    let baseDataUnitIndex = 0;\n    let targetDataUnitIndex = -1;\n    const sign = Math.sign(value);\n    const positiveValue = Math.abs(value);\n    if (unit) {\n        for (let i = 0; i < dataFormatUnits.length; ++i) {\n            let _baseDataUnitIndex = -1;\n            let _targetDataUnitIndex = -1;\n            dataFormatUnits[i].forEach((dataUnit, index) => {\n                if (matchDataUnit(dataUnit, unit))\n                    _baseDataUnitIndex = index;\n                if (matchDataUnit(dataUnit, targetUnit))\n                    _targetDataUnitIndex = index;\n            });\n            if (_baseDataUnitIndex !== -1) {\n                baseDataUnitGroupIndex = i;\n                baseDataUnitIndex = _baseDataUnitIndex;\n                targetDataUnitIndex = _targetDataUnitIndex;\n                break;\n            }\n        }\n    }\n    else if (targetUnit) {\n        targetDataUnitIndex = dataFormatUnits[baseDataUnitGroupIndex].findIndex((dataUnit) => matchDataUnit(dataUnit, targetUnit));\n    }\n    const dataFormatUnitGroup = dataFormatUnits[baseDataUnitGroupIndex];\n    const baseDataFormatUnit = dataFormatUnitGroup[baseDataUnitIndex];\n    let targetDataFormatUnit = baseDataFormatUnit;\n    if (targetDataUnitIndex === -1) {\n        for (let i = baseDataUnitIndex + 1; i < dataFormatUnitGroup.length; ++i) {\n            if (positiveValue /\n                (dataFormatUnitGroup[i].divisor / baseDataFormatUnit.divisor) >=\n                1) {\n                targetDataFormatUnit = dataFormatUnitGroup[i];\n            }\n            else {\n                break;\n            }\n        }\n    }\n    else {\n        targetDataFormatUnit = dataFormatUnitGroup[targetDataUnitIndex];\n    }\n    if (targetUnit && targetDataUnitIndex === -1) {\n        console.warn(`Cannot convert unit \"${unit || baseDataFormatUnit.display}\" to \"${targetUnit}\"`);\n    }\n    return [\n        (positiveValue /\n            (targetDataFormatUnit.divisor / baseDataFormatUnit.divisor)) *\n            sign,\n        targetDataFormatUnit.display,\n    ];\n}\n//# sourceMappingURL=data.js.map","import { bitRates, byteRates, deprecatedByteRates, } from \"../constants\";\nimport { matchUnit } from \"./util\";\nexport const dataRateFormatUnits = [\n    bitRates,\n    byteRates,\n    // deprecated\n    deprecatedByteRates,\n];\nexport const dataRateFormatUnitIds = [].concat.apply([], dataRateFormatUnits.map((dataRateFormatUnitGroup) => [\n    ...dataRateFormatUnitGroup.map((dataRateFormatUnit) => dataRateFormatUnit.id),\n    ...[].concat.apply([], dataRateFormatUnitGroup.map((dataRateFormatUnit) => dataRateFormatUnit.alias ? dataRateFormatUnit.alias : [])),\n]));\nexport function humanizeDataRateValue(value, unit, targetUnit) {\n    let baseDataRateUnitGroupIndex = dataRateFormatUnits.length - 1;\n    let baseDataRateUnitIndex = 0;\n    let targetDataRateUnitIndex = -1;\n    const sign = Math.sign(value);\n    const positiveValue = Math.abs(value);\n    if (unit) {\n        for (let i = 0; i < dataRateFormatUnits.length; ++i) {\n            let _baseDataRateUnitIndex = -1;\n            let _targetDataRateUnitIndex = -1;\n            dataRateFormatUnits[i].forEach((dataRateUnit, index) => {\n                if (matchUnit(dataRateUnit, unit))\n                    _baseDataRateUnitIndex = index;\n                if (matchUnit(dataRateUnit, targetUnit))\n                    _targetDataRateUnitIndex = index;\n            });\n            if (_baseDataRateUnitIndex !== -1) {\n                baseDataRateUnitGroupIndex = i;\n                baseDataRateUnitIndex = _baseDataRateUnitIndex;\n                targetDataRateUnitIndex = _targetDataRateUnitIndex;\n                break;\n            }\n        }\n    }\n    else if (targetUnit) {\n        targetDataRateUnitIndex = dataRateFormatUnits[baseDataRateUnitGroupIndex].findIndex((dataRateUnit) => matchUnit(dataRateUnit, targetUnit));\n    }\n    const dataRateFormatUnitGroup = dataRateFormatUnits[baseDataRateUnitGroupIndex];\n    const baseDataRateFormatUnit = dataRateFormatUnitGroup[baseDataRateUnitIndex];\n    let targetDataRateFormatUnit = baseDataRateFormatUnit;\n    if (targetDataRateUnitIndex === -1) {\n        for (let i = baseDataRateUnitIndex + 1; i < dataRateFormatUnitGroup.length; ++i) {\n            if (positiveValue /\n                (dataRateFormatUnitGroup[i].divisor /\n                    baseDataRateFormatUnit.divisor) >=\n                1) {\n                targetDataRateFormatUnit = dataRateFormatUnitGroup[i];\n            }\n            else {\n                break;\n            }\n        }\n    }\n    else {\n        targetDataRateFormatUnit = dataRateFormatUnitGroup[targetDataRateUnitIndex];\n    }\n    if (targetUnit && targetDataRateUnitIndex === -1) {\n        console.warn(`Cannot convert unit \"${unit || baseDataRateFormatUnit.display}\" to \"${targetUnit}\"`);\n    }\n    return [\n        (positiveValue /\n            (targetDataRateFormatUnit.divisor / baseDataRateFormatUnit.divisor)) *\n            sign,\n        targetDataRateFormatUnit.display,\n    ];\n}\n//# sourceMappingURL=dataRate.js.map","import { ShortUnitId, numberFormatUnits } from \"../constants\";\nexport const humanizeNumberValue = (value, unit, precision) => {\n    let baseNumberUnitIndex = 0;\n    const sign = Math.sign(value);\n    const positiveValue = Math.abs(value);\n    if (unit) {\n        const numberUnitIndex = numberFormatUnits.findIndex((numberUnit) => numberUnit.id.toLocaleLowerCase() === unit.toLocaleLowerCase());\n        if (numberUnitIndex !== -1) {\n            baseNumberUnitIndex = numberUnitIndex;\n        }\n    }\n    let numberFormatUnit = numberFormatUnits[baseNumberUnitIndex];\n    for (let i = baseNumberUnitIndex + 1; i < numberFormatUnits.length; ++i) {\n        if (positiveValue /\n            (numberFormatUnits[i].divisor /\n                numberFormatUnits[baseNumberUnitIndex].divisor) >=\n            1) {\n            numberFormatUnit = numberFormatUnits[i];\n        }\n        else {\n            break;\n        }\n    }\n    if (numberFormatUnit.id === ShortUnitId.None) {\n        return (sign * positiveValue).toFixed(precision ?? 2);\n    }\n    else {\n        return (((positiveValue /\n            (numberFormatUnit.divisor /\n                numberFormatUnits[baseNumberUnitIndex].divisor)) *\n            sign).toFixed(precision ?? 2) + numberFormatUnit.display);\n    }\n};\n//# sourceMappingURL=number.js.map","import { humanizePercentValue } from \"./percent\";\nimport { humanizeTimeValue, timeFormatUnitIds } from \"./time\";\nimport { humanizeDataValue, dataFormatUnitIds } from \"./data\";\nimport { humanizeDataRateValue, dataRateFormatUnitIds } from \"./dataRate\";\nimport { humanizeNumberValue } from \"./number\";\nimport { percentFormatUnitIds, } from \"../constants\";\nexport var FormatType;\n(function (FormatType) {\n    FormatType[\"None\"] = \"none\";\n    FormatType[\"Short\"] = \"short\";\n    FormatType[\"Percent\"] = \"percent\";\n    FormatType[\"Time\"] = \"time\";\n    FormatType[\"Data\"] = \"data\";\n    FormatType[\"DataRate\"] = \"data_rate\";\n})(FormatType || (FormatType = {}));\nexport const formatUnitIds = {\n    [FormatType.None]: [],\n    [FormatType.Short]: [],\n    [FormatType.Percent]: percentFormatUnitIds,\n    [FormatType.Time]: timeFormatUnitIds,\n    [FormatType.Data]: dataFormatUnitIds,\n    [FormatType.DataRate]: dataRateFormatUnitIds,\n};\nexport const convertValueByPrecision = (value, precision) => {\n    return precision === undefined ? value.toString() : value.toFixed(precision);\n};\nexport const formatValue = (value, format) => {\n    if (format) {\n        let { type } = format;\n        if (!type) {\n            if (format.unit) {\n                type = FormatType.Short;\n                Object.entries(formatUnitIds).map(([formatType, units]) => {\n                    if (units\n                        .map((unit) => unit.toLocaleLowerCase())\n                        .includes(format.unit.toLocaleLowerCase())) {\n                        type = formatType;\n                    }\n                });\n            }\n            else {\n                type = FormatType.None;\n            }\n        }\n        const precision = format?.precision === undefined ? 2 : format.precision;\n        switch (type) {\n            case FormatType.Percent: {\n                const percentValue = humanizePercentValue(value, format.unit);\n                return [`${convertValueByPrecision(percentValue, precision)}%`, null];\n            }\n            case FormatType.Time: {\n                const [timeValue, timeUnitDisplay] = humanizeTimeValue(value, format.unit, format.targetUnit);\n                return [\n                    `${convertValueByPrecision(timeValue, format?.precision === undefined ? 1 : format.precision)}`,\n                    timeUnitDisplay,\n                ];\n            }\n            case FormatType.Data: {\n                const [dataValue, dataUnitDisplay] = humanizeDataValue(value, format.unit, format.targetUnit);\n                return [\n                    `${convertValueByPrecision(dataValue, precision)}`,\n                    dataUnitDisplay,\n                ];\n            }\n            case FormatType.DataRate: {\n                const [dataRateValue, dataRateUnitDisplay] = humanizeDataRateValue(value, format.unit, format.targetUnit);\n                return [\n                    `${convertValueByPrecision(dataRateValue, precision)}`,\n                    dataRateUnitDisplay,\n                ];\n            }\n            case FormatType.None: {\n                return [convertValueByPrecision(value, precision), \"\"];\n            }\n            default: {\n                return [\n                    humanizeNumberValue(value, format.unit, precision),\n                    format.unit,\n                ];\n            }\n        }\n    }\n    else {\n        return [humanizeNumberValue(value), null];\n    }\n};\n//# sourceMappingURL=valueFormatter.js.map","import { PercentUnitId as PercentFormatUnitId } from \"../constants\";\nexport function humanizePercentValue(value, unit) {\n    if (unit) {\n        switch (unit.toLocaleLowerCase()) {\n            case PercentFormatUnitId.Percent100.toLocaleLowerCase():\n                return value;\n            default:\n                return value * 100;\n        }\n    }\n    else {\n        return value * 100;\n    }\n}\n//# sourceMappingURL=percent.js.map","import { formatUnitValue } from \"../utils\";\n/**\n * 将一个数值转换为带单位的数据。\n *\n * @category Others\n *\n * @public\n *\n * @example\n *\n * ```ts\n * unitFormat(1024, \"KBps\")\n * // Returns `[\"1.00\", \"MBps\"]`\n * ```\n *\n * @param value - 数值。\n * @param unit - 当前单位。\n * @param precision - 精度（默认为 `2`）。\n * @param targetUnit - 目标单位，若不填则会自动计算。\n *\n * @returns 由转换后的数值和单位组成的数组。\n */\nexport function unitFormat(value, unit, precision = 2, targetUnit) {\n    return formatUnitValue(value, { unit, precision, targetUnit });\n}\n//# sourceMappingURL=unitFormat.js.map","import { safeLoad, JSON_SCHEMA } from \"js-yaml\";\n/**\n * 解析一个 YAML 格式的字符串（反序列化）。\n *\n * @category Serialization\n *\n * @public\n *\n * @param value - YAML 格式的字符串。\n *\n * @returns 返回解析后的值，如果解析失败返回 `undefined`。\n */\nexport function yaml(value) {\n    let result;\n    try {\n        result = safeLoad(value, { schema: JSON_SCHEMA, json: true });\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.error(e);\n    }\n    return result;\n}\n//# sourceMappingURL=yaml.js.map","import { safeDump, JSON_SCHEMA } from \"js-yaml\";\n/**\n * 将一个值转换为 YAML 格式的字符串（序列化）。\n *\n * @category Serialization\n *\n * @public\n *\n * @param value - 输入值。\n * @param indent - 空格缩进数量（默认为 `2`）。\n *\n * @returns 序列化后的字符串；如果序列化失败（例如包含循环引用）返回 `undefined`。\n */\nexport function yamlStringify(value, indent = 2) {\n    let result;\n    try {\n        result = safeDump(value, {\n            indent,\n            schema: JSON_SCHEMA,\n            skipInvalid: true,\n            noRefs: true,\n            noCompatMode: true,\n        });\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.error(e);\n    }\n    return result;\n}\n//# sourceMappingURL=yamlStringify.js.map","import { round as _round } from \"lodash\";\n/**\n * 获取一个数值的近似值。\n *\n * @category Mathematics\n *\n * @remarks 透传调用 {@link https://lodash.com/docs/#round | _.round}。\n *\n * @public\n *\n * @param n - 数值。\n * @param precision - 精度。\n *\n * @returns 近似值。\n */\nexport function round(n, precision) {\n    return _round(n, precision);\n}\n//# sourceMappingURL=round.js.map"],"names":["add","value","operand","Boolean","bool","cmdbInstanceShowName","Array","isArray","firstKey","resKey","slice","length","join","countBy","collection","iteratee","UnitType","PercentUnitId","datetime","format","isPeriod","time","getMoment","input","deltaTime","withSuffix","startTime","endTime","diff","humanize","then","divide","equal","other","isEqual","find","predict","fromIndex","findIndex","array","findLast","findLastIndex","get","object","path","defaultValue","graphTree","query","sort","groupByEdgeOut","groupBy","edges","findChildren","node","relationEdges","instanceId","forEach","edge","key","out_name","foundInstance","vertices","in","resultInstance","push","keyList","uniq","map","isEmpty","orderBy","item","order","topic_vertices","root","groupByToIndex","groupField","targetField","result","isNil","groupByValue","allKeys","keys","v","set","indexOf","includes","part","separator","json","JSON","parse","e","console","error","jsonStringify","indent","stringify","keyBy","mapToArray","data","keyField","valueField","Object","entries","k","mergeArrayByKey","dataList","reduce","acc","cur","values","mergeWith","customizer","objValue","srcValue","concat","multiply","not","nullish","number","Number","parseTimeRange","startOf","matches","exec","num","unit","subtract","randomString","characters","i","charAt","Math","floor","random","reverse","start","end","fields","sortBy","split","string","String","substr","from","substring","ternary","resultIfTrue","resultIfFalse","percentFormatUnitIds","Percent1","Percent100","BytesUnitId","bytes","id","Bytes","alias","divisor","display","Kilobytes","Megabytes","Gigabytes","Terabytes","Petabytes","bibytes","Bibytes","Kibibytes","Mebibytes","Gibibytes","Tebibytes","Pebibytes","deprecatedBytes","b","B","KB","MB","GB","ByteRatesUnitId","bitRates","BitsPerSecond","KilobitsPerSecond","MegabitsPerSecond","GigabitsPerSecond","byteRates","BytesPerSecond","KilobytesPerSecond","MegabytesPerSecond","GigabytesPerSecond","deprecatedByteRates","bps","Bps","KBps","MBps","GBps","TimesUnitId","times","Nanosecond","Microsecond","Milliseconds","Seconds","Minutes","Hours","Days","Weeks","Months","Years","ShortUnitId","ms","s","min","hour","day","week","Time","Byte","Bibyte","BitRate","ByteRate","numberFormatUnits","None","K","M","T","matchUnit","unitData","toLocaleLowerCase","matchDataUnit","timeFormatUnits","timeFormatUnitIds","apply","timeFormatUnitGroup","timeFormatUnit","dataFormatUnits","dataFormatUnitIds","dataFormatUnitGroup","dataFormatUnit","dataRateFormatUnits","dataRateFormatUnitIds","dataRateFormatUnitGroup","dataRateFormatUnit","humanizeNumberValue","precision","baseNumberUnitIndex","sign","positiveValue","abs","numberUnitIndex","numberUnit","numberFormatUnit","toFixed","FormatType","formatUnitIds","Short","Percent","Data","DataRate","convertValueByPrecision","undefined","toString","formatValue","type","formatType","units","percentValue","humanizePercentValue","timeValue","timeUnitDisplay","targetUnit","baseTimeUnitGroupIndex","baseTimeUnitIndex","targetTimeUnitIndex","_baseTimeUnitIndex","_targetTimeUnitIndex","timeUnit","index","baseTimeFormatUnit","targetTimeFormatUnit","warn","humanizeTimeValue","dataValue","dataUnitDisplay","baseDataUnitGroupIndex","baseDataUnitIndex","targetDataUnitIndex","_baseDataUnitIndex","_targetDataUnitIndex","dataUnit","baseDataFormatUnit","targetDataFormatUnit","humanizeDataValue","dataRateValue","dataRateUnitDisplay","baseDataRateUnitGroupIndex","baseDataRateUnitIndex","targetDataRateUnitIndex","_baseDataRateUnitIndex","_targetDataRateUnitIndex","dataRateUnit","baseDataRateFormatUnit","targetDataRateFormatUnit","humanizeDataRateValue","unitFormat","yaml","safeLoad","schema","JSON_SCHEMA","yamlStringify","safeDump","skipInvalid","noRefs","noCompatMode","round","n"],"sourceRoot":""}